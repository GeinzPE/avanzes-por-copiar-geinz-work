@file:OptIn(ExperimentalSharedTransitionApi::class)

package com.geinzz.geinzwork.ui.adapters.ui.pantallas

import android.text.Layout
import android.util.Log
import android.widget.Toast
import androidx.compose.animation.AnimatedVisibility
import androidx.compose.animation.ExperimentalSharedTransitionApi
import androidx.compose.animation.core.FastOutSlowInEasing
import androidx.compose.animation.core.tween
import androidx.compose.animation.fadeIn
import androidx.compose.animation.fadeOut
import androidx.compose.animation.slideInVertically
import androidx.compose.animation.slideOutVertically
import androidx.compose.foundation.background
import com.google.accompanist.systemuicontroller.rememberSystemUiController
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.material.Button
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Scaffold
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.SideEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.livedata.observeAsState
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.saveable.rememberSaveable
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.focus.FocusRequester
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import androidx.navigation.compose.currentBackStackEntryAsState
import androidx.navigation.compose.rememberNavController
import androidx.navigation.toRoute
import com.geinzz.geinzwork.ui.adapters.ui.COMP_principal_filtrado.texto_generico_one_line
import com.geinzz.geinzwork.ui.adapters.ui.loadings.pantalla_carga_login
import com.geinzz.geinzwork.ui.adapters.ui.lugares_turisticos.pantalla_lugares_turisticos
import com.geinzz.geinzwork.ui.adapters.ui.pantallas.busqueda.ui_pantalla_busqueda
import com.geinzz.geinzwork.ui.adapters.ui.pantallas.cuenta_user.cuenta_user
import com.geinzz.geinzwork.ui.adapters.ui.pantallas.favoritos.iu_favoritos
import com.geinzz.geinzwork.ui.adapters.ui.pantallas.filtrado_tiendas.Pantalla_filtrado_tiendas
import com.geinzz.geinzwork.ui.adapters.ui.pantallas.login.IniciarSeccion
import com.geinzz.geinzwork.ui.adapters.ui.pantallas.login.login_principal
import com.geinzz.geinzwork.ui.adapters.ui.pantallas.principal_ui.HandleBackPress
import com.geinzz.geinzwork.ui.adapters.ui.pantallas.principal_ui.PantallaExplorarTiendas
import com.geinzz.geinzwork.ui.adapters.ui.pantallas.principal_ui.bottom_navigation
import com.geinzz.geinzwork.ui.adapters.ui.pantallas.principal_ui.pantalla_mapa_perzonalizado
import com.geinzz.geinzwork.ui.adapters.ui.principal.pantalla_principal
import com.geinzz.geinzwork.ui.adapters.ui.ui.theme.fondo_oscuro5_s
import com.geinzz.geinzwork.viewModels.viewModel_filtado_tiendas
import com.geinzz.geinzwork.viewModels.viewModel_localizate_geinz
import com.geinzz.geinzwork.viewModels.viewModel_login_user
import com.geinzz.geinzwork.viewModels.viewModel_lugares_turisticos
import com.geinzz.geinzwork.viewModels.viewModel_principal_geinz_work
import com.google.firebase.auth.FirebaseAuth

private lateinit var firebaseAuth: FirebaseAuth

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun nativationWrapper(
    viewmodel: viewModel_localizate_geinz
) {
    firebaseAuth = FirebaseAuth.getInstance()
    val context = LocalContext.current
    val navController = rememberNavController()
    val viewModelLugares: viewModel_lugares_turisticos = viewModel()
    val viewModelCordenadas: viewModel_principal_geinz_work = viewModel()
    val viewModel_login_user: viewModel_login_user = viewModel()
    val viewModel_filtrado_tiendas: viewModel_filtado_tiendas = viewModel()
    val mostrarCarga by viewModel_login_user.mostrarCarga.observeAsState(false)
    val systemUiController = rememberSystemUiController()
    val navBackStackEntry by navController.currentBackStackEntryAsState()
    val currentRoute = navBackStackEntry?.destination?.route
    val focusRequester = remember { FocusRequester() }
    var isvisble_buttomvar by rememberSaveable { mutableStateOf(true) }

    SideEffect {
        // Si la ruta actual es de las principales...
        val colorBarraInferior = if (
            currentRoute == "pantalla_principal" ||
            currentRoute == "buscar" ||
            currentRoute == "favoritos" ||
            currentRoute == "principal" ||
            currentRoute == "login_principal"
        ) {

            if (isvisble_buttomvar) {
                Color(0xFF744ACB) // visible → color normal
            } else {
                Color.Black       // oculta → negro
            }
        } else {
            // En otras pantallas → tu color oscuro por defecto
            fondo_oscuro5_s
        }

        // Barra de estado (arriba)
        systemUiController.setStatusBarColor(
            color = fondo_oscuro5_s,
            darkIcons = false
        )

        // Barra de navegación (abajo)
        systemUiController.setNavigationBarColor(
            color = colorBarraInferior,
            darkIcons = false
        )
    }


    val showBottomBar = when (currentRoute) {
        "pantalla_principal", "buscar", "favoritos", "principal", "login_principal" -> isvisble_buttomvar
        else -> false
    }

    LaunchedEffect(currentRoute) {
        if (currentRoute == "buscar") {
            isvisble_buttomvar = false
        } else if (currentRoute != "buscar" && !isvisble_buttomvar) {
            isvisble_buttomvar = true
        }
    }
    Box(modifier = Modifier.fillMaxSize()) {
        Scaffold(
            bottomBar = {
                AnimatedVisibility(
                    visible = showBottomBar,
                    enter = slideInVertically(
                        initialOffsetY = { it },
                        animationSpec = tween(
                            durationMillis = 400,
                            easing = FastOutSlowInEasing
                        )
                    ),
                    exit = slideOutVertically(
                        targetOffsetY = { it },
                        animationSpec = tween(
                            durationMillis = 400,
                            easing = FastOutSlowInEasing
                        )
                    )
                ) {

                    bottom_navigation(navController)

                }
            },
        ) { innerPadding ->
            HandleBackPress(navController)
            NavHost(
                navController = navController,
                startDestination = "pantalla_principal",
                modifier = Modifier.padding(innerPadding)
            ) {
                // Pantalla principal
                composable("pantalla_principal") {
                    pantalla_principal(
                        categorias = { localidad, nombre ->
                            navController.navigate(
                                mostrar_tiendas(
                                    nombre,
                                    localidad
                                )
                            )
                        },
                        clikear_cartas = { categoira, nombre, localidad ->
                            Log.d("obtenos_datos", "$categoira $localidad $nombre")
                            if (firebaseAuth.currentUser != null) {
                                navController.navigate(
                                    screen_filtrado(
                                        categoira,
                                        localidad,
                                        nombre
                                    )
                                )
                            } else {
                                Toast.makeText(
                                    context,
                                    "Registrate primero bro",
                                    Toast.LENGTH_SHORT
                                ).show()
                            }
                        },
                        ver_lugares = { navController.navigate(lugares_turisticos) },
                        listner_busqueda = {

                            navController.navigate("buscar")

                        },
                        navController = navController
                    )
                }
                // Login
                composable("login_principal") {
                    if (firebaseAuth.currentUser != null) {
                        cuenta_user(viewModel_login_user, navController)
                    } else {
                        IniciarSeccion(
                            viewModel_login_user, navController,
                            { tipo_cuenta ->
                                navController.navigate(crear_cuenta_geinz(tipo_cuenta))
                            },
                        )
                    }
                }

                composable("buscar") {
                    ui_pantalla_busqueda(
                        isvisble_buttomvar,
                        focusRequester = focusRequester,
                        mostrar = {
                                Log.d("mandaomos","mostar")
                                isvisble_buttomvar = true

                        },
                        ocultar = {
                            Log.d("mandaomos","opcultar")
                            isvisble_buttomvar = false
                        })
                }

                composable("favoritos") {
                    iu_favoritos()
                }


                // Explorar tiendas
                composable<mostrar_tiendas> { navback ->
                    val datos_user = navback.toRoute<mostrar_tiendas>()
                    PantallaExplorarTiendas(
                        datos_user.localidad,
                        datos_user.nombre_user,
                        viewmodel,
                        clik_img = { categoria, localidada, nombre_user ->
                            if (firebaseAuth.currentUser != null) {
                                navController.navigate(
                                    screen_filtrado(
                                        categoria,
                                        localidada,
                                        nombre_user
                                    )
                                )
                            } else {
                                Toast.makeText(
                                    context,
                                    "Registrate primero bro",
                                    Toast.LENGTH_SHORT
                                ).show()
                            }

                        }
                    )
                }

                composable<map_perzonalizado> { navback ->
                    val direcciones = navback.toRoute<map_perzonalizado>()
                    pantalla_mapa_perzonalizado(
                        viewModel_filtrado_tiendas,
                        direcciones.tipo,
                        viewModelLugares
                    )
                }

                composable<screen_filtrado> { navback ->
                    val categoria_localidad = navback.toRoute<screen_filtrado>()
                    Pantalla_filtrado_tiendas(
                        viewModel_filtrado_tiendas,
                        categoria_localidad.categoria,
                        categoria_localidad.localidad,
                        categoria_localidad.nombre_user,
                        navigation_regresar = { navController.popBackStack() },
                        abrir_mapa = { tipo ->
                            navController.navigate(map_perzonalizado(tipo))
                        }
                    )
                }

                composable<lugares_turisticos> { navback ->
                    pantalla_lugares_turisticos(
                        "barranca",
                        viewModelLugares,
                        viewModelCordenadas
                    ) { tipo ->
                        navController.navigate(map_perzonalizado(tipo))
                    }
                }

                composable<crear_cuenta_geinz> { navback ->
                    val tipo_crear_cuenta = navback.toRoute<crear_cuenta_geinz>()
                    login_principal(
                        viewModel_login_user,
                        tipo_crear_cuenta.tipo_completado,
                        navController
                    )
                }
            }
        }
//        Button(
//            {},
//            modifier = Modifier.align(Alignment.BottomEnd)
//        ) { texto_generico_one_line("clikeame") }

        AnimatedVisibility(
            visible = mostrarCarga,
            enter = fadeIn(),
            exit = fadeOut()
        ) {
            Box(
                modifier = Modifier
                    .fillMaxSize()
                    .background(Color.Black.copy(alpha = 0.6f))
            ) {
                pantalla_carga_login()
            }


        }
    }
}







